POLYMORPHISM- is a key concept in object-oriented programming that allows us to write code that can work with different types of objects.

OPERATOR OVERLOADING-is a process of using an operator instead of function to do a particular operation.
we cannot overloded these following operators:
  class member access operator(.,.*)
  sizeof operator
  conditional operator(?:)
scope resolution operator(::)






                                                         //UNARY OPERATOR OVERLOADING

#include<iostream>
using namespace std;
class unary_optr
{
    int value;
    public:
    unary_optr()
    {
        value=5;
    }
    void operator ++()
    {
        ++value;
    }
    void display()
    {
        cout<<value<<endl;
    }
};
int main ()
{
  unary_optr obj;
  ++obj;
  obj.display();
  return 0;
}






                                                                                  //BINARY OPTR OVERLOADING



#include<iostream>
using namespace std;
class complex
{
    float f,s;
    public:
    complex()
    {
        f=0;
        s=0;
    }
    complex(float f,float s)
    {
        this->f=f;
        this->s=s;
    }
    complex operator +(const complex &x)
    {
        complex temp;
        temp.f=f+x.f;
        temp.s=s+x.s;
        return temp;
        
    }
    void display()
    {
        cout<<f<<" +i"<<s<<endl;
    }
};
int main ()
{
  complex obj1(2,3);
  complex obj2(4,2);
  complex res=obj1+obj2;
  res.display();
  return 0;
}






Eg:
#include<iostream>
#include<string.h>
using namespace std;
struct name{
    char initial[30];
};
name operator +(name &s1,name &s2)
{
name s3;
strcpy(s3.initial,s1.initial);
strcat(s3.initial,s2.initial);
return s3;
}
int main()
{
    name s1,s2,s3;
    cout<<"Enter s1:";
    cin>>s1.initial;
    cout<<"Enter s2:";
    cin>>s2.initial;
    s3=s1 + s2;
    cout<<s3.initial<<endl;

    return 0;

}
